{"version":3,"sources":["hooks/http.hook.js","components/heroesList/heroesSlice.js","components/heroesListItem/HeroesListItem.js","components/spinner/Spinner.js","components/heroesList/HeroesList.js","components/heroesFilters/filtersSlice.js","store/index.js","components/heroesAddForm/HeroesAddForm.js","components/heroesFilters/HeroesFilters.js","components/app/App.js","index.js"],"names":["useHttp","request","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","heroesAdapter","createEntityAdapter","initialState","getInitialState","heroesLoadingStatus","fetchHeroes","createAsyncThunk","heroesSlice","createSlice","name","reducers","heroCreated","state","action","addOne","payload","heroDeleted","removeOne","extraReducers","builder","addCase","pending","fulfilled","setAll","rejected","addDefaultCase","actions","reducer","selectAll","getSelectors","heroes","filteredHeroesSelector","createSelector","filters","activeFilter","filter","item","element","heroesFetching","heroesFetched","heroesFetchingError","HeroesListItem","elementClassName","description","onDelete","className","src","alt","style","onClick","type","aria-label","Spinner","role","HeroesList","filteredHeroes","useSelector","dispatch","useDispatch","useEffect","useCallback","id","arr","elements","length","map","props","filtersAdapter","filtersLoadingStatus","console","log","fetchFilters","filtersSlice","filtersChanged","filtersFetching","filtersFetched","filtersFetchingError","stringMiddleware","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","process","HeroesAddForm","useState","heroName","setHeroName","heroDescr","setHeroDescr","heroElement","setHeroElement","getState","onSubmit","e","preventDefault","newHero","uuidv4","htmlFor","required","value","onChange","target","placeholder","label","renderFilters","HeroesFilters","btnClass","classNames","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50c45141.chunk.js","sourcesContent":["\nexport const useHttp = () => {\n\n    const request = async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            throw e;\n        }\n    };\n\n    return {request}\n}","import { createSlice, createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport {useHttp} from '../../hooks/http.hook';\r\nimport { createSelector } from '@reduxjs/toolkit'\r\n\r\nconst heroesAdapter = createEntityAdapter();\r\n\r\n// const initialState = {\r\n//     heroes: [],\r\n//     heroesLoadingStatus: 'idle'\r\n// }\r\n\r\nconst initialState = heroesAdapter.getInitialState({            //getInitialState (метод из createEntityAdapter) -он содержит уже ids[], entities{}\r\n    heroesLoadingStatus: 'idle'\r\n});\r\n\r\nexport const fetchHeroes = createAsyncThunk(\r\n    'heroes/fetchHeroes',      //1-ый арг type, heroes-name slice, fetchHeroes - тип actions\r\n    () => {                    //2-ой арг - фун-ия payloadCreator\r\n        const {request} = useHttp();\r\n        return request(\"http://localhost:3001/heroes\");\r\n    }\r\n)\r\n\r\nconst heroesSlice = createSlice({\r\n    name: 'heroes',         //1-ый арг(от этого назв. пойдут название всех ост действий этого Slice)\r\n    initialState,           //2-ой арг\r\n    reducers: {             //3-ий арг\r\n        heroCreated: (state, action) => {\r\n            heroesAdapter.addOne(state, action.payload); //payload - попадают все данные по новому герою\r\n        },\r\n        heroDeleted: (state, action) => {\r\n            heroesAdapter.removeOne(state, action.payload); //в payload сравнивает id\r\n        }\r\n    },\r\n    extraReducers:(builder) => {            //4-ый арг, получает доп.reducers, откуда-то из вне\r\n        builder\r\n            .addCase(fetchHeroes.pending,   //1-ый арг. fetchHeroes-созданный нами action creator из createAsyncThunk, pending приходит из него и означает когда что-то асинх.отравляется\r\n                state =>                            \r\n                {state.heroesLoadingStatus = 'loading'})          //2-ой арг - действие по изм state\r\n            .addCase(fetchHeroes.fulfilled,                 //fulfilled - отправка прошла успешна\r\n                (state, action) => {\r\n                    state.heroesLoadingStatus = 'idle';\r\n                    heroesAdapter.setAll(state, action.payload);\r\n                })\r\n            .addCase(fetchHeroes.rejected,          //rejected - отклонено\r\n                state => {\r\n                    state.heroesLoadingStatus = 'error'\r\n                })\r\n            .addDefaultCase( () => {})\r\n    }\r\n});\r\n\r\nconst {actions, reducer} = heroesSlice   //вытаскиваем эти объекты из heroesSlice\r\nexport default reducer;\r\n\r\nconst {selectAll} = heroesAdapter.getSelectors(state => state.heroes); //превращаем {} heroes в []\r\n\r\n//Создать мемолизированную фун-ию для предотвращение повторного рендеринга без изм. filters\r\nexport const filteredHeroesSelector = createSelector(\r\n    (state) => state.filters.activeFilter,        //1-ая фун-ия\r\n    selectAll,                                     //2-ая фун-ия, получаем [] heroes\r\n    (filter, heroes) => {                          //3-ая фун-ия, filter приходит из 1-ой функ, heroes - из 2-ой функ\r\n        if(filter === 'all'){                      //если активна кнопка all\r\n            return heroes;                      //то отражаются все герои\r\n        }else {             \r\n            return heroes.filter(item => item.element === filter)   \r\n        } //все герои фильруются и создается новый массив, куда попадут только те у кого element совпадает с активны фильтром(кнопкой)\r\n    }\r\n)\r\n\r\nexport const {\r\n    heroesFetching,\r\n    heroesFetched, \r\n    heroesFetchingError,\r\n    heroCreated,\r\n    heroDeleted\r\n} = actions;","\nconst HeroesListItem = ({name, description, element, onDelete}) => {\n\n    let elementClassName;\n\n    switch (element) {\n        case 'fire':\n            elementClassName = 'bg-danger bg-gradient';\n            break;\n        case 'water':\n            elementClassName = 'bg-primary bg-gradient';\n            break;\n        case 'wind':\n            elementClassName = 'bg-success bg-gradient';\n            break;\n        case 'earth':\n            elementClassName = 'bg-secondary bg-gradient';\n            break;\n        default:\n            elementClassName = 'bg-warning bg-gradient';\n    }\n\n    return (\n        <li \n            className={`card flex-row mb-4 shadow-lg text-white ${elementClassName}`}>\n            <img src=\"http://www.stpaulsteinbach.org/wp-content/uploads/2014/09/unknown-hero.jpg\" \n                 className=\"img-fluid w-25 d-inline\" \n                 alt=\"unknown hero\" \n                 style={{'objectFit': 'cover'}}/>\n            <div className=\"card-body\">\n                \n                <h3 className=\"card-title\">{name}</h3>\n                <p className=\"card-text\">{description}</p>\n            </div>\n            <span className=\"position-absolute top-0 start-100 translate-middle badge border rounded-pill bg-light\">\n                <button onClick={onDelete} type=\"button\" className=\"btn-close btn-close\" aria-label=\"Close\"></button>\n            </span>\n        </li>\n    )\n}\n\nexport default HeroesListItem;","\nconst Spinner = () => {\n    return (\n        <div className=\"spinner-border mx-auto mt-5\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}\n\nexport default Spinner;","import {useHttp} from '../../hooks/http.hook';\nimport { useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { heroDeleted, fetchHeroes, filteredHeroesSelector } from './heroesSlice';\n\nimport HeroesListItem from \"../heroesListItem/HeroesListItem\";\nimport Spinner from '../spinner/Spinner';\n\n\nconst HeroesList = () => {\n    const filteredHeroes = useSelector(filteredHeroesSelector);\n    const heroesLoadingStatus = useSelector(state => state.heroes.heroesLoadingStatus);\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    \n    //отправка запроса на сервер\n    useEffect(() => {\n        dispatch(fetchHeroes());\n\n        // eslint-disable-next-line\n    }, []);\n\n\n    //удаление из базы данных\n    // const onDelete = useCallback((id) => {\n    //     // Удаление персонажа по его id\n    //     request(`http://localhost:3001/heroes/${id}`, \"DELETE\")\n    //         .then(data => console.log(data, 'Deleted'))\n    //         .then(dispatch(heroDeleted(id)))\n    //         .catch(err => console.log(err));\n    //     // eslint-disable-next-line  \n    // }, [request]);\n\n    const onDelete = useCallback((id) => {\n        dispatch(heroDeleted(id))\n\n        // eslint-disable-next-line \n    }, []);\n\n\n    if (heroesLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (heroesLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderHeroesList = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Героев пока нет</h5>\n        }\n\n        return arr.map(({id, ...props}) => {\n            return <HeroesListItem key={id} {...props} onDelete ={() => onDelete(id) } />\n        })\n    }\n\n\n    const elements = renderHeroesList(filteredHeroes);\n    return (\n        <ul>\n            {elements}\n        </ul>\n    )\n}\n\nexport default HeroesList;","import { createSlice, createAsyncThunk, createEntityAdapter } from \"@reduxjs/toolkit\";\r\nimport {useHttp} from '../../hooks/http.hook';\r\n\r\n// const initialState = {\r\n//     filters: [],\r\n//     filtersLoadingStatus: 'idle',\r\n//     activeFilter: 'all'\r\n// }\r\n\r\nconst filtersAdapter = createEntityAdapter();\r\n\r\nconst initialState = filtersAdapter.getInitialState({\r\n    filtersLoadingStatus: 'idle',\r\n    activeFilter: 'all'\r\n});\r\n\r\nconsole.log(initialState);\r\n\r\nexport const fetchFilters = createAsyncThunk(\r\n    'filters/fetchFilters',      //1-ый арг type, filters-name slice, fetchFilters - тип actions\r\n    () => {                    //2-ой арг - фун-ия payloadCreator\r\n        const {request} = useHttp();\r\n        return request(\"http://localhost:3001/filters\");\r\n    }\r\n)\r\n\r\nconst filtersSlice = createSlice({\r\n    name: 'filters',         //1-ый арг(от этого назв. пойдут название всех ост действий этого Slice)\r\n    initialState,           //2-ой арг\r\n    reducers: {             //3-ий арг\r\n        filtersChanged: (state, action) => {\r\n            state.activeFilter = action.payload;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {         //4-ый арг\r\n        builder\r\n            .addCase(fetchFilters.pending, state => {              //filters - name, Fetching - действие, fetchFilters - action\r\n                state.filtersLoadingStatus = 'loading'})\r\n            .addCase(fetchFilters.fulfilled, \r\n                (state, action) => {\r\n                state.filtersLoadingStatus = 'idle';\r\n                filtersAdapter.setAll(state, action.payload);\r\n            })\r\n            .addCase(fetchFilters.rejected,\r\n                state => {\r\n                    state.filtersLoadingStatus = 'error'\r\n            })\r\n            .addDefaultCase( () => {})\r\n    }\r\n});\r\n\r\nconst {actions, reducer} = filtersSlice;   //вытаскиваем эти объекты из filtersSlice\r\nexport default reducer;\r\n\r\nexport const {selectAll} = filtersAdapter.getSelectors(state => state.filters);  //filters из {} превращаем в []\r\n\r\nexport const {\r\n    filtersFetching,\r\n    filtersFetched, \r\n    filtersFetchingError,\r\n    filtersChanged,\r\n} = actions;","// import { createStore, combineReducers, compose, applyMiddleware} from 'redux';\n// import ReduxThunk from 'redux-thunk'\nimport { configureStore } from '@reduxjs/toolkit';\nimport filters from '../components/heroesFilters/filtersSlice';\nimport heroes from '../components/heroesList/heroesSlice';\n\nconst stringMiddleware = (store) => (dispatch) => (action) => {     //по умолч. store - принимаем лишь dispatch и getState; dispatch тоже по умолч.; action - арг.\n    if(typeof action === 'string'){    //если в dispatch action пришел как строка\n        return dispatch({           //то мы превращаем его в стандартный action объект с type     \n            type: action\n        })\n    } else {\n        return dispatch(action)  //если пришел объект, то просто его запускаем\n    }\n}\n\n//создание store с помощью Toolkit: configureStore()\nconst store = configureStore({\n    reducer: {filters, heroes},\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(stringMiddleware),\n    devTools: process.env.NODE_ENV !== 'production'   //devTools- принимает булиновое значение; true при создание, т.е. не продакшн\n});\n\nexport default store;\n\n// const enhancer = (createStore) => (...args) => {\n//     const store = createStore(...args);\n\n//     const oldDispatch = store.dispatch; //стандартный dispatch, ктр содержится в store\n//     store.dispatch = (action) => {\n//         if(typeof action === 'string'){    //если в dispatch action пришел как строка\n//             return oldDispatch({           //то мы превращаем его в стандартный action объект с type     \n//                 type: action\n//             })\n//         } else {\n//             return oldDispatch(action)\n//         }\n//     }\n//     return store;\n// }\n\n\n// const store = createStore(combineReducers({         //1 арг reducers\n//                     filters: filters , \n//                     heroes: heroes}),\n\n//                     compose(applyMiddleware(ReduxThunk, stringMiddleware),           //compose - соединяет несколько фун-ий во 2-м арг.\n//                              window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\n//         // compose(enhancer,           //compose - соединяет несколько фун-ий во 2-м арг.\n//         //     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n//     );\n\n\n","import {useHttp} from '../../hooks/http.hook';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport store from '../../store';\n\nimport { heroCreated } from '../heroesList/heroesSlice';\nimport { selectAll } from '../heroesFilters/filtersSlice';\n\n\nconst HeroesAddForm = () => {\n    const [heroName, setHeroName] = useState('');\n    const [heroDescr, setHeroDescr] = useState('');\n    const [heroElement, setHeroElement] = useState('');\n\n    const {filtersLoadingStatus} = useSelector(state => state.filters);\n    const filters = selectAll(store.getState());   //получаем доступ к глобальному state в store и из него вытащим filters с помтощью selectAll\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n\n\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        // Можно сделать и одинаковые названия состояний\n        const newHero = {\n            id: uuidv4(),\n            name: heroName,\n            description: heroDescr,\n            element: heroElement\n        }\n\n        dispatch(heroCreated(newHero));\n        // Отправляем данные на сервер в формате JSON\n        // ТОЛЬКО если запрос успешен - отправляем персонажа в store\n        // request(\"http://localhost:3001/heroes\", \"POST\", JSON.stringify(newHero))\n        //     .then(res => console.log(res, 'Отправка успешна'))\n        //     .then(dispatch(heroCreated(newHero)))\n        //     .catch(err => console.log(err));\n\n        // Очищаем форму после отправки\n        setHeroName('');\n        setHeroDescr('');\n        setHeroElement('');\n    }\n\n    const renderFilters = (filters, status) => {\n        if (status === \"loading\") {\n            return <option>Загрузка элементов</option>\n        } else if (status === \"error\") {\n            return <option>Ошибка загрузки</option>\n        }\n        \n        // Если фильтры есть, то рендерим их\n        if (filters && filters.length > 0 ) {\n            return filters.map(({name, label}) => {\n                // Один из фильтров нам тут не нужен\n                // eslint-disable-next-line\n                if (name === 'all')  return;\n\n                return <option key={name} value={name}>{label}</option>\n            })\n        }\n    }\n\n    return (\n        <form className=\"border p-4 shadow-lg rounded\" onSubmit={onSubmitHandler}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"name\" className=\"form-label fs-4\">Имя нового героя</label>\n                <input \n                    required\n                    type=\"text\" \n                    name=\"name\" \n                    className=\"form-control\" \n                    id=\"name\" \n                    value={heroName}\n                    onChange={(e) => setHeroName(e.target.value)}\n                    placeholder=\"Как меня зовут?\"/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"text\" className=\"form-label fs-4\">Описание</label>\n                <textarea\n                    required\n                    name=\"text\" \n                    className=\"form-control\" \n                    id=\"text\" \n                    value={heroDescr}\n                    onChange={(e) => setHeroDescr(e.target.value)}\n                    placeholder=\"Что я умею?\"\n                    style={{\"height\": '130px'}}/>\n            </div>\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"element\" className=\"form-label\">Выбрать элемент героя</label>\n                <select \n                    required\n                    className=\"form-select\" \n                    id=\"element\" \n                    name=\"element\"\n                    value={heroElement}\n                    onChange={(e) => setHeroElement(e.target.value)}>\n                    \n                    <option >Я владею элементом...</option>\n                    {renderFilters(filters, filtersLoadingStatus)}\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Создать</button>\n        </form>\n    )\n}\n\nexport default HeroesAddForm;","import {useHttp} from '../../hooks/http.hook';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport store from '../../store';\n\nimport { filtersChanged, fetchFilters, selectAll} from './filtersSlice';\nimport Spinner from '../spinner/Spinner';\n\nconst HeroesFilters = () => {\n\n    const {filtersLoadingStatus, activeFilter} = useSelector(state => state.filters);\n    const filters = selectAll(store.getState());   //получаем доступ к глобальному state в store и из него вытащим filters с помтощью selectAll\n    const dispatch = useDispatch();\n    const {request} = useHttp();\n\n    // Запрос на сервер для получения фильтров и последовательной смены состояния\n    useEffect(() => {\n        dispatch(fetchFilters(request));\n\n        // eslint-disable-next-line\n    }, []);\n\n    if (filtersLoadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (filtersLoadingStatus === \"error\") {\n        return <h5 className=\"text-center mt-5\">Ошибка загрузки</h5>\n    }\n\n    const renderFilters = (arr) => {\n        if (arr.length === 0) {\n            return <h5 className=\"text-center mt-5\">Фильтры не найдены</h5>\n        }\n\n        // Данные в json-файле я расширила классами и текстом\n        return arr.map(({name, className, label}) => {\n\n            // Используем библиотеку classnames и формируем классы динамически\n            const btnClass = classNames('btn', className, {\n                'active': name === activeFilter\n            });\n            \n            return <button \n                        key={name} \n                        id={name} \n                        className={btnClass}\n                        onClick={() => dispatch(filtersChanged(name))}\n                        >{label}</button>\n        })\n    }\n\n    const elements = renderFilters(filters);\n\n    return (\n        <div className=\"card shadow-lg mt-4\">\n            <div className=\"card-body\">\n                <p className=\"card-text\">Отфильтруйте героев по элементам</p>\n                <div className=\"btn-group\">\n                    {elements}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HeroesFilters;","import HeroesList from '../heroesList/HeroesList';\nimport HeroesAddForm from '../heroesAddForm/HeroesAddForm';\nimport HeroesFilters from '../heroesFilters/HeroesFilters';\n\nimport './app.scss';\n\nconst App = () => {\n    \n    return (\n        <main className=\"app\">\n            <div className=\"content\">\n                <HeroesList/>\n                <div className=\"content__interactive\">\n                    <HeroesAddForm/>\n                    <HeroesFilters/>\n                </div>\n            </div>\n        </main>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/app/App';\nimport store from './store';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}